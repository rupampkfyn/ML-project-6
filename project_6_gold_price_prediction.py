# -*- coding: utf-8 -*-
"""Project 6. Gold Price Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gxcCr18NyDPb8Zc0KK7570q_bI78gPjl

Importing the dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics

# loading the csv data to a Pandas DataFrame
gold_data = pd.read_csv('/content/gld_price_data.csv')

# print first 5 rows in the dataframe
gold_data.head()

# print the last 5 rows of the DataFrame
gold_data.tail()

# number of rows and columns
gold_data.shape

# getiing some basic information about the data
gold_data.info()

# checking the number of missing values
gold_data.isnull().sum()

# getting statistical measures of the data
gold_data.describe()

"""Correlation

1. Positive Correlation
2. Negative Correlation
"""

correlation = gold_data.corr()

# constructing the heatmap to understand the correlation
plt.figure(figsize=(8,8))
sns.heatmap(correlation,cbar=True,square=True,fmt='.1f',annot=True,annot_kws={'size':8},cmap='Blues')

# correlation values of GLD
print(correlation['GLD'])

# checking the distribution of the GLD price
sns.distplot(gold_data['GLD'],color='green')

"""Splitting the features and target"""

X = gold_data.drop(['Date','GLD'],axis=1)
Y = gold_data['GLD']

print(X)

print(Y)

"""Seperating into Training data and Test data"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y, test_size = 0.2, random_state=2)

"""Model Training:

Random Forest Regressor
"""

regressor = RandomForestRegressor(n_estimators=100)

regressor.fit(X_train,Y_train)

"""Model Evaluation"""

# prediction on test data
test_data_prediction = regressor.predict(X_test)

print(test_data_prediction)

# R squared Error
error_score = metrics.r2_score(Y_test, test_data_prediction)

print('R squared error:', error_score)

"""Compare the actual values and predicted values in a Plot"""

Y_test = list(Y_test)

plt.plot(Y_test, color='blue',label = 'Actual Values')
plt.plot(test_data_prediction, color = 'green', label = 'Predicted Values')
plt.title('Actual Price vs Predicted Price')
plt.xlabel('Number of values')
plt.ylabel('Gold Price')
plt.legend()
plt.show()

